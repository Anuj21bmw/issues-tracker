import logging
import os
import asyncio
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

# Global AI service instances
_ai_services: Dict[str, Any] = {}
_services_initialized = False

try:
    from .classifier import IssueClassifier
    from .chat_assistant import ChatAssistant
    from .analytics import PredictiveAnalytics
    from .document_processor import DocumentProcessor
    from .assignment_engine import SmartAssignmentEngine
    from .notification_engine import SmartNotificationEngine
    from .resolution_assistant import ResolutionAssistant
    from .base import AIBaseService

    __all__ = [
        'IssueClassifier',
        'ChatAssistant',
        'PredictiveAnalytics',
        'ResolutionAssistant',
        'SmartNotificationEngine',
        'DocumentProcessor',
        'SmartAssignmentEngine',
        'get_ai_service',
        'initialize_ai_services',
        'get_ai_health',
        'cleanup_ai_services'
    ]

    def initialize_ai_services() -> Dict[str, Any]:
        """Initialize all AI services and return service instances"""
        global _ai_services, _services_initialized
        
        if _services_initialized:
            return _ai_services
        
        try:
            logger.info("Initializing AI services...")
            
            # Initialize core AI services
            _ai_services['classifier'] = IssueClassifier()
            _ai_services['chat_assistant'] = ChatAssistant()
            _ai_services['analytics'] = PredictiveAnalytics()
            _ai_services['document_processor'] = DocumentProcessor()
            _ai_services['assignment_engine'] = SmartAssignmentEngine()
            _ai_services['notification_engine'] = SmartNotificationEngine()
            _ai_services['resolution_assistant'] = ResolutionAssistant()
            
            # Validate all services
            for service_name, service in _ai_services.items():
                if not isinstance(service, AIBaseService):
                    logger.warning(f"Service {service_name} is not an AIBaseService instance")
                else:
                    logger.info(f"âœ… {service_name} initialized successfully")
            
            _services_initialized = True
            logger.info("ðŸ¤– All AI services initialized successfully")
            
            return _ai_services
            
        except Exception as e:
            logger.error(f"Failed to initialize AI services: {e}")
            # Fall back to basic implementations
            return _initialize_fallback_services()

    def _initialize_fallback_services() -> Dict[str, Any]:
        """Initialize fallback AI services for development/testing"""
        global _ai_services, _services_initialized
        
        logger.warning("Using fallback AI service implementations")
        
        from .base import AIBaseService
        
        class FallbackClassifier(AIBaseService):
            async def classify_issue(self, title: str, description: str):
                return {
                    'suggested_severity': 'MEDIUM',
                    'suggested_tags': ['general'],
                    'confidence': 0.5,
                    'reasoning': 'Fallback classification'
                }
            
            async def batch_classify_issues(self, issues):
                return [
                    {'issue_id': issue.get('id'), 'classification': await self.classify_issue('', '')}
                    for issue in issues
                ]
        
        class FallbackChatAssistant(AIBaseService):
            async def process_chat_message(self, message: str, context: Dict[str, Any]):
                return {
                    'response': 'AI chat service is currently in fallback mode. Basic functionality available.',
                    'confidence': 0.3,
                    'suggestions': ['Try rephrasing your question', 'Check system status']
                }
        
        class FallbackAnalytics(AIBaseService):
            def __init__(self):
                super().__init__()
                self.models_trained = True
            
            async def predict_resolution_time(self, issue_data):
                severity = issue_data.get('severity', 'MEDIUM')
                base_hours = {'LOW': 24, 'MEDIUM': 8, 'HIGH': 4, 'CRITICAL': 2}
                return {
                    'predicted_hours': base_hours.get(severity, 8),
                    'confidence': 0.5,
                    'reasoning': 'Fallback prediction based on severity'
                }
            
            async def predict_escalation_risk(self, issue_data):
                return {
                    'escalation_risk': 0.3,
                    'risk_level': 'MEDIUM',
                    'factors': ['Fallback assessment']
                }
            
            async def analyze_team_trends(self, days):
                return {
                    'period_days': days,
                    'insights': ['Fallback analytics mode active'],
                    'predictions': {
                        'next_week_volume': 'Normal expected volume',
                        'potential_bottlenecks': [],
                        'recommendations': ['Enable full AI services']
                    }
                }
            
            def _train_models(self):
                logger.info("Fallback analytics: Model training skipped")
        
        class FallbackDocumentProcessor(AIBaseService):
            async def process_document(self, file_path: str, filename: str):
                return {
                    'filename': filename,
                    'file_type': os.path.splitext(filename)[1],
                    'insights': ['Fallback document processing - basic analysis only'],
                    'processed_at': '2025-01-01T12:00:00Z'
                }
        
        class FallbackAssignmentEngine(AIBaseService):
            async def suggest_assignee(self, issue_data):
                return {
                    'suggested_assignee': 'maintainer@example.com',
                    'confidence': 0.5,
                    'reasoning': ['Fallback assignment suggestion'],
                    'alternatives': []
                }
            
            async def get_assignment_analytics(self, days):
                return {
                    'period_days': days,
                    'insights': ['Fallback assignment analytics'],
                    'assignment_distribution': {}
                }
            
            async def suggest_workload_rebalancing(self):
                return {
                    'rebalancing_needed': False,
                    'current_balance': 'unknown',
                    'suggestions': []
                }
        
        class FallbackNotificationEngine(AIBaseService):
            async def should_escalate(self, issue):
                return {
                    'should_escalate': False,
                    'escalation_level': 'none',
                    'reasoning': ['Fallback escalation check']
                }
            
            async def generate_smart_notifications(self, users):
                return [
                    {
                        'user_id': user.id,
                        'notifications': [{
                            'type': 'info',
                            'message': 'AI notifications in fallback mode',
                            'priority': 'low'
                        }]
                    }
                    for user in users
                ]
            
            async def get_notification_summary(self, user, days):
                return {
                    'total_notifications': 0,
                    'unread_count': 0,
                    'priority_breakdown': {'high': 0, 'medium': 0, 'low': 0}
                }
            
            async def analyze_notification_patterns(self, days):
                return {
                    'period_days': days,
                    'patterns': {},
                    'insights': ['Fallback notification analysis']
                }
        
        class FallbackResolutionAssistant(AIBaseService):
            async def suggest_resolution_steps(self, issue):
                return [
                    {
                        'step': 1,
                        'action': 'Analyze the issue description',
                        'description': 'Review the problem details carefully',
                        'estimated_time': '15 minutes',
                        'priority': 'high'
                    },
                    {
                        'step': 2,
                        'action': 'Gather additional information',
                        'description': 'Collect logs, screenshots, or reproduction steps',
                        'estimated_time': '30 minutes',
                        'priority': 'medium'
                    }
                ]
            
            async def track_resolution_progress(self, issue_id):
                return {
                    'issue_id': issue_id,
                    'progress_percentage': 25,
                    'completed_steps': 1,
                    'total_steps': 4,
                    'current_step': 'Information gathering',
                    'next_actions': ['Continue analysis']
                }
            
            async def generate_resolution_report(self, issue_id):
                return {
                    'issue_id': issue_id,
                    'summary': 'Fallback resolution report generated',
                    'steps_taken': ['Initial analysis completed'],
                    'lessons_learned': ['Enable full AI services for detailed reports']
                }
        
        # Initialize fallback services
        _ai_services = {
            'classifier': FallbackClassifier(),
            'chat_assistant': FallbackChatAssistant(),
            'analytics': FallbackAnalytics(),
            'document_processor': FallbackDocumentProcessor(),
            'assignment_engine': FallbackAssignmentEngine(),
            'notification_engine': FallbackNotificationEngine(),
            'resolution_assistant': FallbackResolutionAssistant()
        }
        
        _services_initialized = True
        logger.warning("ðŸ”„ Fallback AI services initialized")
        return _ai_services

    def get_ai_service(service_name: str) -> Optional[Any]:
        """Get a specific AI service instance"""
        if not _services_initialized:
            initialize_ai_services()
        
        return _ai_services.get(service_name)

    async def get_ai_health() -> Dict[str, Any]:
        """Get health status of all AI services"""
        if not _services_initialized:
            initialize_ai_services()
        
        health_status = {
            'ai_services_initialized': _services_initialized,
            'total_services': len(_ai_services),
            'services': {},
            'overall_status': 'healthy'
        }
        
        # Check each service
        for service_name, service in _ai_services.items():
            try:
                if hasattr(service, 'health_check'):
                    service_health = await service.health_check()
                else:
                    service_health = {
                        'service': service_name,
                        'status': 'healthy' if service.is_healthy else 'degraded'
                    }
                
                health_status['services'][service_name] = service_health
                
                # Update overall status
                if service_health.get('status') != 'healthy':
                    health_status['overall_status'] = 'degraded'
                    
            except Exception as e:
                health_status['services'][service_name] = {
                    'service': service_name,
                    'status': 'error',
                    'error': str(e)
                }
                health_status['overall_status'] = 'degraded'
        
        return health_status

    def cleanup_ai_services():
        """Cleanup AI services on shutdown"""
        global _ai_services, _services_initialized
        
        logger.info("Cleaning up AI services...")
        
        for service_name, service in _ai_services.items():
            try:
                if hasattr(service, 'cleanup'):
                    service.cleanup()
                logger.info(f"âœ… {service_name} cleaned up")
            except Exception as e:
                logger.error(f"Error cleaning up {service_name}: {e}")
        
        _ai_services.clear()
        _services_initialized = False
        logger.info("ðŸ§¹ AI services cleanup completed")

    # Auto-initialize services on import
    logger.info("AI module imported - services will be initialized on first use")

except ImportError as e:
    logger.error(f"Failed to import AI classes: {e}")
    
    # Minimal fallback for critical import failures
    class MinimalAIService:
        def __init__(self):
            self.is_healthy = False
        
        async def health_check(self):
            return {'status': 'unavailable', 'error': 'AI services not available'}
    
    # Create minimal fallback implementations
    IssueClassifier = MinimalAIService
    ChatAssistant = MinimalAIService
    PredictiveAnalytics = MinimalAIService
    DocumentProcessor = MinimalAIService
    SmartAssignmentEngine = MinimalAIService
    SmartNotificationEngine = MinimalAIService
    ResolutionAssistant = MinimalAIService
    
    def initialize_ai_services():
        return {}
    
    def get_ai_service(service_name: str):
        return None
    
    async def get_ai_health():
        return {
            'ai_services_initialized': False,
            'overall_status': 'unavailable',
            'error': 'AI services could not be imported'
        }
    
    def cleanup_ai_services():
        pass
    
    __all__ = [
        'IssueClassifier',
        'ChatAssistant', 
        'PredictiveAnalytics',
        'ResolutionAssistant',
        'SmartNotificationEngine',
        'DocumentProcessor',
        'SmartAssignmentEngine',
        'get_ai_service',
        'initialize_ai_services',
        'get_ai_health',
        'cleanup_ai_services'
    ]
    
    logger.warning("Using minimal AI service fallbacks due to import errors")

